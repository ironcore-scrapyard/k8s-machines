/*
 * Copyright (c) 2020 by The metal-stack Authors.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/onmetal/k8s-machines/pkg/apis/machines/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DHCPLeaseLister helps list DHCPLeases.
type DHCPLeaseLister interface {
	// List lists all DHCPLeases in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.DHCPLease, err error)
	// DHCPLeases returns an object that can list and get DHCPLeases.
	DHCPLeases(namespace string) DHCPLeaseNamespaceLister
	DHCPLeaseListerExpansion
}

// dHCPLeaseLister implements the DHCPLeaseLister interface.
type dHCPLeaseLister struct {
	indexer cache.Indexer
}

// NewDHCPLeaseLister returns a new DHCPLeaseLister.
func NewDHCPLeaseLister(indexer cache.Indexer) DHCPLeaseLister {
	return &dHCPLeaseLister{indexer: indexer}
}

// List lists all DHCPLeases in the indexer.
func (s *dHCPLeaseLister) List(selector labels.Selector) (ret []*v1alpha1.DHCPLease, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DHCPLease))
	})
	return ret, err
}

// DHCPLeases returns an object that can list and get DHCPLeases.
func (s *dHCPLeaseLister) DHCPLeases(namespace string) DHCPLeaseNamespaceLister {
	return dHCPLeaseNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DHCPLeaseNamespaceLister helps list and get DHCPLeases.
type DHCPLeaseNamespaceLister interface {
	// List lists all DHCPLeases in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.DHCPLease, err error)
	// Get retrieves the DHCPLease from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.DHCPLease, error)
	DHCPLeaseNamespaceListerExpansion
}

// dHCPLeaseNamespaceLister implements the DHCPLeaseNamespaceLister
// interface.
type dHCPLeaseNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DHCPLeases in the indexer for a given namespace.
func (s dHCPLeaseNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DHCPLease, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DHCPLease))
	})
	return ret, err
}

// Get retrieves the DHCPLease from the indexer for a given namespace and name.
func (s dHCPLeaseNamespaceLister) Get(name string) (*v1alpha1.DHCPLease, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("dhcplease"), name)
	}
	return obj.(*v1alpha1.DHCPLease), nil
}
